C51 COMPILER V9.60.0.0   ADS1118                                                           07/02/2021 22:57:52 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ADS1118
OBJECT MODULE PLACED IN .\Objects\ads1118.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ads1118.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\ads1118.lst)
                    - OBJECT(.\Objects\ads1118.obj)

line level    source

   1          #include "ads1118.h"
   2          #include "delay.h"
   3          #include <intrins.h>
   4          #include <regx52.h>
   5          
   6          /* void delay_ms(uint z) {
   7                  uint x;
   8                  for (; z > 0; z--)
   9                          for (x = 110; x > 0; x--);
  10          } */
  11          void ADS1118_Init(void) {
  12   1              CS_H;
  13   1              SCLK_H;
  14   1              MOSI_L;
  15   1      
  16   1              Write_ADS1118(CONFIG_VALUE, 0);
  17   1              // EA = 1;
  18   1      }
  19          union aa {
  20                  uint dat1[2];
  21                  ulong dat2;
  22          };
  23          uint Write_ADS1118(uint dat, uchar mode) {
  24   1              //      uint temp;
  25   1              union aa temp;
  26   1              union aa temp1;
  27   1              //      ulong Value;
  28   1              uchar i;
  29   1              if (mode == 1)
  30   1                      dat |= 0x8000;
  31   1              temp.dat1[1] = dat;
  32   1              temp.dat1[0] = dat;
  33   1              SCLK_L;
  34   1              CS_L;
  35   1              delay(1);
  36   1              for (i = 0; i < 32; i++) {
  37   2                      if (temp.dat2 & 0x80000000)
  38   2                              MOSI_H;
  39   2                      else
  40   2                              MOSI_L;
  41   2                      temp.dat2 <<= 1;
  42   2                      _nop_();
  43   2                      SCLK_H;
  44   2                      _nop_();
  45   2                      SCLK_L;
  46   2                      _nop_();
  47   2      
  48   2                      temp1.dat2 <<= 1;
  49   2                      if (READ_MISO)
  50   2                              temp1.dat2 |= 0x01;
  51   2                      _nop_();
  52   2              }
  53   1              CS_H;
  54   1              SCLK_L;
C51 COMPILER V9.60.0.0   ADS1118                                                           07/02/2021 22:57:52 PAGE 2   

  55   1              MOSI_L;
  56   1              MISO_L;
  57   1              //      printf("temp %d\n\r",temp1.dat1[0]);
  58   1              //      printf("temp %#X\n\r",temp1.dat1[1]);
  59   1              return temp1.dat1[0];
  60   1      }
  61          
  62          /*******************************************************************************
  63          //函数名称：ADS_SEL_Read（）
  64          //函数功能：读取各路电压，通过两个switch选择读取不同的通道
  65          //输    入：road:增益放大器两端的电压选择，并选择测几路电压
  66          //          Ref: 选择参考电压，有6种选择
  67          //输    出：dat：16位ad转换数据
  68          //备    注：这一次读出的转换数据是上一次的转换数据，不要混淆.这里选择的是
             -单次
  69                                  转换电压值，当然，也可以选择多次转换,通过寄存器的第8位可以设置
  70          //日    期：2013.6.8
  71          *******************************************************************************/
  72          int ADS_SEL_Read(uchar road, uchar Ref) { //测几路电压
  73   1              int dat = 0;
  74   1              uint Config_Value = 0x008b; //默认低8位，DOUT带上拉电阻
  75   1              switch (road) {
  76   2                      case 0: Config_Value += 0x0000; break; // AINP = AIN0 and AINN = AIN1 (default)
  77   2                      case 1: Config_Value += 0x1000; break; // AINP = AIN0 and AINN = AIN3
  78   2                      case 2: Config_Value += 0x2000; break; // AINP = AIN1 and AINN = AIN3
  79   2                      case 3: Config_Value += 0x3000; break; // AINP = AIN2 and AINN = AIN3
  80   2                      case 4: Config_Value += 0x4000; break; // AINP = AIN0 and AINN = GND
  81   2                      case 5: Config_Value += 0x5000; break; // AINP = AIN1 and AINN = GND
  82   2                      case 6: Config_Value += 0x6000; break; // AINP = AIN2 and AINN = GND
  83   2                      case 7: Config_Value += 0x7000; break; // AINP = AIN3 and AINN = GND
  84   2                      default: break;
  85   2              }
  86   1              switch (Ref) {
  87   2              case 0: Config_Value += 0x0000; break; // 000 : FS = ±6.144V(1)
  88   2              case 1: Config_Value += 0x0200; break; // 001 : FS = ±4.096V(1)
  89   2              case 2: Config_Value += 0x0400; break; // 002 : FS = ±2.048V(1)
  90   2              case 3: Config_Value += 0x0600; break; // 003 : FS = ±1.024V(1)
  91   2              case 4: Config_Value += 0x0800; break; // 004 : FS = ±0.512V(1)
  92   2              case 5: case 6: case 7: Config_Value += 0x0a00; break; // 005 : FS = ±0.256V(1)
  93   2              default: break;
  94   2              }
  95   1              CS_L;
  96   1              dat = Write_ADS1118(Config_Value, 1);
  97   1              _nop_();
  98   1              CS_H;
  99   1              return dat;
 100   1      }
 101          
 102          /* void Init(void) { //此函数方便串口调试
 103                  TMOD = 0X20;
 104                  TH1 = 0XFD;
 105                  TR1 = 1;
 106                  SM1 = 1;
 107                  SM0 = 0;
 108                  REN = 1;
 109                  TI = 1;
 110          } */
 111          
 112          // 获取电压值的函数
 113          float getVolt() {
 114   1              unsigned int value;
 115   1              float Volt_Value;
C51 COMPILER V9.60.0.0   ADS1118                                                           07/02/2021 22:57:52 PAGE 3   

 116   1              delay(1000);
 117   1              value = ADS_SEL_Read(5, 0); // 6.144
 118   1              //      printf("value = %d\n\r",value);
 119   1              //      LCD_ShowString(1, 1, "value:");
 120   1              //      LCD_ShowNum(1, 6, value, 4);
 121   1              Volt_Value = value * 6.144 / 32768; //第二次转换时读出的是前一次的电压
 122   1              //      printf("Volt_Value %f\n\r\n\r",Volt_Value);
 123   1              //      LCD_ShowString(2, 1, "volt: ");
 124   1              //      LCD_ShowNum(2, 6, (unsigned int)Volt_Value, 4);
 125   1              return Volt_Value;
 126   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    404    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
